import React, { useState, useEffect } from 'react';
import './Game.css'; // –î–æ–±–∞–≤—å —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª–µ–π –∏ –∫–ª–µ—Ç–æ–∫
import {useSocket} from "../context/SocketContext";

function areAllShipsSunk(gameCard, fieldHits) {
    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ –≤ gameCard
    for (const length in gameCard) {
        for (const ship of gameCard[length]) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫—Ä—ã—Ç—ã –ª–∏ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –∫–æ—Ä–∞–±–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏—è–º–∏
            for (let x = ship.start.x; x <= ship.end.x; x++) {
                for (let y = ship.start.y; y <= ship.end.y; y++) {
                    const isHit = fieldHits.some(hit => hit.x === x && hit.y === y && hit.isHit);
                    if (!isHit) {
                        // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–ª–µ—Ç–∫–∞ –∫–æ—Ä–∞–±–ª—è –Ω–µ –ø–æ–¥–±–∏—Ç–∞
                        return false;
                    }
                }
            }
        }
    }

    // –ï—Å–ª–∏ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –≤—Å–µ—Ö –∫–æ—Ä–∞–±–ª–µ–π –ø–æ–¥–±–∏—Ç—ã
    return true;
}



const Game = () => {
    const [myFieldHits, setMyFieldHits] = useState([]); // –£–¥–∞—Ä—ã –ø–æ –º–æ–µ–º—É –ø–æ–ª—é
    const [enemyFieldHits, setEnemyFieldHits] = useState([]); // –£–¥–∞—Ä—ã –ø–æ –ø–æ–ª—é —Å–æ–ø–µ—Ä–Ω–∏–∫–∞

    const {gameCardContext, sendMessage, waitMessage} = useSocket()

    const gameCard = gameCardContext

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    useEffect(() => {
        //—è —Å—Ç—Ä–µ–ª—è—é
        waitMessage('hit', ({ x, y, isHit }) => {
            setEnemyFieldHits(prev => [...prev, { x, y, isHit }]);

            console.log('hit', isHit)
            const result = areAllShipsSunk(gameCard, enemyFieldHits)
            console.log(result)
            if (result){
                alert('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!')
                sendMessage('GameOver', {})
            }
        });

        //–≤—ã—Å—Ç—Ä–µ–ª –ø–æ –º–Ω–µ
        waitMessage('enemyHit', ({ x, y }) => {
            setMyFieldHits(prev => [...prev, { x, y }]);
            console.log('shoot to me')
        });

    }, []);


    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–ª–µ—Ç–∫–∏
    const renderCellContent = (x, y, fieldHits, isMyField) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ –∏–ª–∏ –≤—ã—Å—Ç—Ä–µ–ª–µ
        const hitInfo = fieldHits.find(hit => hit.x === x && hit.y === y);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∞–±–ª–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ—ë–º –ø–æ–ª–µ
        if (isMyField) {
            for (const length in gameCard) {
                for (const ship of gameCard[length]) {
                    const isPartOfShip =
                        (ship.start.x === x && ship.start.y <= y && ship.end.y >= y) || // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –∫–æ—Ä–∞–±–ª—å
                        (ship.start.y === y && ship.start.x <= x && ship.end.x >= x);   // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –∫–æ—Ä–∞–±–ª—å

                    // –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –∫–æ—Ä–∞–±–ª—è
                    if (isPartOfShip) {
                        const wasHit = myFieldHits.some(hit => hit.x === x && hit.y === y && hit.isHit);

                        // –ï—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å –±—ã–ª –∞—Ç–∞–∫–æ–≤–∞–Ω –∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω
                        if (wasHit) {
                            return <div className="cell ship hit">üö¢</div>;
                        }

                        // –ö–æ—Ä–∞–±–ª—å –±–µ–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
                        return <div className="cell ship">üö¢</div>;
                    }
                }
            }
        }

        // –ï—Å–ª–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –ø–æ –∫–ª–µ—Ç–∫–µ
        if (hitInfo && hitInfo.isHit) {
            return <div className="cell ship hit">üö¢</div>;
        }

        // –ï—Å–ª–∏ —Å—Ç—Ä–µ–ª—è–ª–∏, –Ω–æ –Ω–µ –ø–æ–ø–∞–ª–∏
        if (hitInfo && !hitInfo.isHit) {
            return <div className="cell shot"></div>;
        }



        // –ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞
        return '';
    };



    // –†–µ–Ω–¥–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    const renderGrid = (fieldHits, isMyField) => {
        const grid = [];
        for (let y = 0; y < 10; y++) {
            const row = [];
            for (let x = 0; x < 10; x++) {
                row.push(
                    <div
                        key={`${x}-${y}`}
                        className={`cell ${fieldHits.some(hit => hit.x === x && hit.y === y) ? 'hit' : ''}`}
                        onClick={!isMyField ? () => handleCellClick(x, y) : null}
                    >
                        {renderCellContent(x, y, fieldHits, isMyField)}
                    </div>
                );
            }
            grid.push(<div key={y} className="row">{row}</div>);
        }
        return grid;
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –ø–æ–ª—é —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
    const handleCellClick = (x, y) => {
        sendMessage('shoot', {x, y});
        console.log('shoot', {x,y})// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    };


    return (
        <div className="game">
            <div className="field">
                <h3>–ú–æ—ë –ø–æ–ª–µ</h3>
                {renderGrid(myFieldHits, true)}
            </div>
            <div className="field">
                <h3>–ü–æ–ª–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞</h3>
                {renderGrid(enemyFieldHits, false)}
            </div>
        </div>
    );
};

export default Game;
